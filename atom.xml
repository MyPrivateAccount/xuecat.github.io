<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XueCat</title>
  <subtitle>用代码创造世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xuecat.github.io/"/>
  <updated>2016-08-28T16:52:52.756Z</updated>
  <id>https://xuecat.github.io/</id>
  
  <author>
    <name>XueCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo新博客搭建177</title>
    <link href="https://xuecat.github.io/2016/08/29/177/"/>
    <id>https://xuecat.github.io/2016/08/29/177/</id>
    <published>2016-08-28T16:23:34.000Z</published>
    <updated>2016-08-28T16:52:52.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建坑"><a href="#搭建坑" class="headerlink" title="搭建坑"></a>搭建坑</h1><p><strong><em>1. favior坑</em></strong>。混蛋，配置文件里面说的不一样，必须要给个路径，不然简直呵呵。</p>
<p><strong><em>2. about页面坑</em></strong>。我想用photos对about页面进行修饰，我去。NexT对所有属性页面都处理了不支持photos；<br><br>气死人。只有两种方式：1、改布局，头上写layout:post；2、加本地图片<code>&lt;img&gt;</code>属性，但是有个坑就是无法水平布局（只能求他们看看了）</p>
<p><strong><em>3. 最强之坑</em></strong>。url问题，对于几个menu的访问，我一直访问不到。<br><br>一直以为是其他问题(本来该访问<code>https:\\</code>的，它直接访问了站点，所以找不到网页) <br><br>搞了一天，我日了狗了！！还好有好心人，要改md代码。</p>
<p><strong><em>4. 代码高亮坑</em></strong>。普通makedown的tab识别有问题，只能加上标注了<br></p>
<pre><code>{% codeblock [title] [lang:language] [url] [link text] %}  
    code snippet  
    {% endcodeblock %}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建坑&quot;&gt;&lt;a href=&quot;#搭建坑&quot; class=&quot;headerlink&quot; title=&quot;搭建坑&quot;&gt;&lt;/a&gt;搭建坑&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;1. favior坑&lt;/em&gt;&lt;/strong&gt;。混蛋，配置文件里面说的不一样，必须要给个路径，不然简直呵呵
    
    </summary>
    
      <category term="学习" scheme="https://xuecat.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="杂项" scheme="https://xuecat.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
      <category term="工具" scheme="https://xuecat.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>sobey音频视频(176)</title>
    <link href="https://xuecat.github.io/2016/08/27/176/"/>
    <id>https://xuecat.github.io/2016/08/27/176/</id>
    <published>2016-08-26T19:33:58.000Z</published>
    <updated>2016-08-27T22:38:55.727Z</updated>
    
    <content type="html"><![CDATA[<p>WAV文件解析：<br><br>wBitsPerSample 样本位深（每次采样样本大小，bit单位）<br><br>nBlockAlig 字节单位设置块对齐。即最小数据的原子大小。当为pcm时 此值为（nchaaneels<em>wbitspersample）/8可以看出这是以byte为单位<br>所以码率就是字节块</em>采样率</p>
<p>AMFS中对音频的放置是按帧放置平面pcm数据的。且帧数也是参照视频P、N制来的。<br>也就是说，每帧大小就是码率/视频帧数     P制25帧、N制29.5帧</p>
<p><a href="http://blog.sina.com.cn/s/blog_68fea30801017fzx.html" target="_blank" rel="external">音频码率和采样率解析</a></p>
<p><a href="http://infiniteccq.blog.163.com/blog/static/208214034201301743627217/" target="_blank" rel="external">wave代码头解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WAV文件解析：&lt;br&gt;&lt;br&gt;wBitsPerSample 样本位深（每次采样样本大小，bit单位）&lt;br&gt;&lt;br&gt;nBlockAlig 字节单位设置块对齐。即最小数据的原子大小。当为pcm时 此值为（nchaaneels&lt;em&gt;wbitspersample）/8可以看出
    
    </summary>
    
      <category term="音视频" scheme="https://xuecat.github.io/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="错误认识" scheme="https://xuecat.github.io/tags/%E9%94%99%E8%AF%AF%E8%AE%A4%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>STL算法函数(175)</title>
    <link href="https://xuecat.github.io/2016/08/20/175/"/>
    <id>https://xuecat.github.io/2016/08/20/175/</id>
    <published>2016-08-19T19:33:58.000Z</published>
    <updated>2016-08-29T13:29:03.523Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算法记录"><a href="#算法记录" class="headerlink" title="算法记录"></a>算法记录</h4><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><table>
<thead>
<tr>
<th>算法名</th>
<th style="text-align:center">算法用途</th>
<th style="text-align:center">算法名</th>
<th style="text-align:center">算法用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#accumulate">accumulate</a></td>
<td style="text-align:center">元素累计</td>
<td style="text-align:center"><a href="#fill">fill</a></td>
<td style="text-align:center">改填元素值</td>
</tr>
<tr>
<td><a href="#adjacent_find">adjacent_find</a></td>
<td style="text-align:center">查找相邻而重复的元素</td>
<td style="text-align:center"><a href="#fill_n">fill_n</a></td>
<td style="text-align:center">改填元素值，n次</td>
</tr>
<tr>
<td></td>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="#find">find</a></td>
<td style="text-align:center">循序查找</td>
</tr>
<tr>
<td><a href="#binary_search">binary_search</a></td>
<td style="text-align:center">二分查找</td>
<td style="text-align:center"><a href="#find_if">find_if</a></td>
<td style="text-align:center">循序查找符合特定条件者</td>
</tr>
<tr>
<td><a href="#copy">copy</a></td>
<td style="text-align:center">复制</td>
<td style="text-align:center"><a href="#find_end">find_end</a></td>
<td style="text-align:center">查找某个子序列最后一次出现点</td>
</tr>
<tr>
<td><a href="#copy_backward">copy_backward</a></td>
<td style="text-align:center">逆向复制</td>
<td style="text-align:center"><a href="#find_first_of">find_first_of</a></td>
<td style="text-align:center">查找某些元素的首次出现点</td>
</tr>
<tr>
<td><a href="#copy_n">copy_n</a></td>
<td style="text-align:center">复制n个元素</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="#count">count</a></td>
<td style="text-align:center">计数</td>
<td style="text-align:center"><a href="#for_each">for_each</a></td>
<td style="text-align:center">代码见</td>
</tr>
<tr>
<td><a href="#count_if">count_if</a></td>
<td style="text-align:center">特定条件下计数</td>
<td style="text-align:center"><a href="#generate">generate</a></td>
<td style="text-align:center">以特定操作之运算结果填充特定区间内的元素</td>
</tr>
<tr>
<td><a href="#equal">equal</a></td>
<td style="text-align:center">判断两个区间相等与否</td>
<td style="text-align:center"><a href="#generate_n">generate_n</a></td>
<td style="text-align:center">同上，多个n个元素内容</td>
</tr>
<tr>
<td><a href="#equal_range">equal_range</a></td>
<td style="text-align:center">在有序区间中寻找某值</td>
</tr>
<tr>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="#includes">includes</a></td>
<td style="text-align:center">是否涵盖于某序列中</td>
<td style="text-align:center"><a href="#max_element">max_element</a></td>
<td style="text-align:center">最大值所在位置</td>
</tr>
<tr>
<td><a href="#inplace_merge">inplace_merge</a></td>
<td style="text-align:center">合并并就地替换上去</td>
<td style="text-align:center"><a href="#merge">merge</a></td>
<td style="text-align:center">合并俩个序列</td>
</tr>
<tr>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="#is_sorted">is_sorted</a></td>
<td style="text-align:center">判断区间是否已排序</td>
<td style="text-align:center"><a href="#min_element">min_element</a></td>
<td style="text-align:center">同理</td>
</tr>
<tr>
<td><a href="#iter_swap">iter_swap</a></td>
<td style="text-align:center">元素互换</td>
<td style="text-align:center"><a href="#mismatch">mismatch</a></td>
<td style="text-align:center">找出不匹配点</td>
</tr>
<tr>
<td><a href="#lower_bound">lower_bound</a></td>
<td style="text-align:center">将指定元素插入区间之内<br>而不影响区间之原本排序的最低位置</td>
</tr>
<tr>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="#partial_sort">partial_sort</a></td>
<td style="text-align:center">局部排序</td>
<td style="text-align:center"><a href="#partition">partition</a></td>
<td style="text-align:center">分割</td>
</tr>
<tr>
<td><a href="#partial_sort_copy">partial_sort_copy</a></td>
<td style="text-align:center">局部排序并复制到他处</td>
<td style="text-align:center"><a href="#power">power</a></td>
<td style="text-align:center">幂次方</td>
</tr>
<tr>
<td><a href="#partial_sum">partial_sum</a></td>
<td style="text-align:center">局部求和</td>
</tr>
<tr>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td><a href="#remove">remove</a></td>
<td style="text-align:center">删除（假的）</td>
<td style="text-align:center"><a href="#replace">replace</a></td>
<td style="text-align:center">替换某类元素</td>
</tr>
<tr>
<td><a href="#remove_copy">remove_copy</a></td>
<td style="text-align:center">删除某类元素并将结果复制到另一个容器</td>
<td style="text-align:center"><a href="#replace_copy">replace_copy</a></td>
<td style="text-align:center">替换某类元素将结果复制到另一个容器</td>
</tr>
<tr>
<td><a href="#remove_if">remove_if</a></td>
<td style="text-align:center">有条件删除（也是假的）</td>
<td style="text-align:center"><a href="#replace_if">replace_if</a></td>
<td style="text-align:center">同</td>
</tr>
<tr>
<td><a href="#remove_copy_if">remove_copy_if</a></td>
<td style="text-align:center">同</td>
<td style="text-align:center"><a href="#replace_copy_if">replace_copy_if</a></td>
<td style="text-align:center">同</td>
</tr>
<tr>
<td><a href="#reverse">reverse</a></td>
<td style="text-align:center">反转元素次序</td>
<td style="text-align:center"><a href="#swap">swap</a></td>
<td style="text-align:center">置换</td>
</tr>
<tr>
<td><a href="#reverse_copy">reverse_copy</a></td>
<td style="text-align:center">同</td>
<td style="text-align:center"><a href="#transform">transform</a></td>
<td style="text-align:center">一俩序列为基础，交互作用产生第三个序列</td>
</tr>
<tr>
<td><a href="#sort">sort</a></td>
<td style="text-align:center">排序</td>
<td style="text-align:center"><a href="#unique">unique</a></td>
<td style="text-align:center">将重复的元素折叠缩编，使成唯一</td>
</tr>
</tbody>
</table>
<h4 id="xfunctional文件里面实现了大多数的一般算法结构"><a href="#xfunctional文件里面实现了大多数的一般算法结构" class="headerlink" title="xfunctional文件里面实现了大多数的一般算法结构"></a>xfunctional文件里面实现了大多数的一般算法结构</h4><p></p><h2 id="accumulate"> accumulate <h2><p></p>
<blockquote>
<p>std::accumulate(iv.begin(), iv.end(), da, plus<int>()) == std::accumulate(iv.begin(), iv.end(), da);<br><br>return值为da + 1 + 2 + 3 + 4 + 5;<br><br><br>std::accumulate(iv.begin(), iv.end(), da, minus<int>());<br><br>return值为da - 1 - 2 - 3 - 4 - 5;<br><br><br>把da作为第一个左值，一个一个获取右值。运算后再返回为下一个左值</int></int></p>
</blockquote>
<p></p><h2 id="equal"> equal <h2><p></p>
<blockquote>
<p>判断之前最好先比较元素个数是否相等。<br>判断原作就是 if (<em>first1 != </em>first2) return false;</p>
</blockquote>
<p></p><h2 id="fill"> fill <h2><p></p>
<p></p><h2 id="fill_n"> fill_n <h2><p></p>
<blockquote>
<p>这俩个真没啥说的。</p>
</blockquote>
<p></p><h2 id="iter_swap"> iter_swap <h2><p></p>
<blockquote>
<p>这个调用要重写 operator= 函数</p>
</blockquote>
<p></p><h2 id="mismatch"> mismatch <h2><p></p>
<blockquote>
<p>while(first1 != last1 &amp;&amp; <em>first1 == </em>first2) { ++first1; ++first2; }<br><br>return pair<inputiterator1, inputiterator2=""><first1, first2="">;<br><br>返回值很有意思可以探究。<br></first1,></inputiterator1,></p>
</blockquote>
<p></p><h2 id="copy"> copy <h2><p></p>
<p></p><h2 id="copy_backward"> copy_backward <h2><p></p>
<blockquote>
<p>后者是逆向复制。<br><br>copy是允许覆盖的即copy(p.begin(), p.end() - 1, p.begin() + 1);这种形式。<br>但是有注意点：</p>
<blockquote>
<p>1、对第三个参数是没有边界判断的，如果小了，会崩溃。<br>2、对deque无效，会全部变成第一参数的值；只vector才行。 (具体原因没细究)</p>
</blockquote>
</blockquote>
<h1 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h1><p><strong>这些函数有set，表面看上去像给set用的，然而不止这么简单。只要有序，就都可以<br><br>s1由于只是访问，可以set、vector等；s2同；<br><br>s3由于需要被赋值，vector等可以，但set是不行的。s3还有个限制，如果没有resize的空间，赋值会错误。</strong></p>
<p></p><h2 id="set_union"> set_union </h2><p></p>
<blockquote>
<p>它是set的操作<br>合并俩个set为一个set，第三个set依旧需要给与足够空间，不然也会运行错误。</p>
</blockquote>
<p></p><h2 id="set_intersection"> set_intersection </h2><p></p>
<blockquote>
<p>它是set的操作<br>它求俩个set的交集，第三个set依旧需要给与足够空间，不然也会运行错误。</p>
</blockquote>
<p></p><h2 id="set_difference"> set_difference </h2><p></p>
<blockquote>
<p>它是set的操作<br>它是求两个set的不同，出现于s1但不出现于s2的元素，赋值到s3。s3依旧需要空间。</p>
</blockquote>
</h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;算法记录&quot;&gt;&lt;a href=&quot;#算法记录&quot; class=&quot;headerlink&quot; title=&quot;算法记录&quot;&gt;&lt;/a&gt;算法记录&lt;/h4&gt;&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="c函数" scheme="https://xuecat.github.io/tags/c%E5%87%BD%E6%95%B0/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>Placement new(174)</title>
    <link href="https://xuecat.github.io/2016/08/16/174/"/>
    <id>https://xuecat.github.io/2016/08/16/174/</id>
    <published>2016-08-15T19:33:58.000Z</published>
    <updated>2016-08-28T05:43:58.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Placement-new"><a href="#Placement-new" class="headerlink" title="Placement new"></a>Placement new</h1><figure class="highlight c"><figcaption><span>先看一段代码：++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1,<span class="keyword">class</span> T2&gt;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="number">_</span>construct(T1* p,<span class="keyword">const</span> T2&amp; value)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">new</span>(p) T1(value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> <span class="number">_</span>tmain(<span class="keyword">int</span> argc, <span class="number">_</span>TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="number">_</span>construct(&amp;p, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;p &lt;&lt; <span class="built_in">endl</span> &lt;&lt; &amp;t &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    system(<span class="string">"pause"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//神奇的new的用法</span></div><div class="line"><span class="comment">//居然对p进行返回了</span></div><div class="line"><span class="comment">//这个使用的就是Placement new</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><h2 id="先回顾下知识"><a href="#先回顾下知识" class="headerlink" title="先回顾下知识 "></a>先回顾下知识 <br></h2><p>new和delete操作符我们应该都用过，它们是对堆中的内存进行申请和释放，而这两个都是不能被重载的。<br>要实现不同的内存分配行为，需要重载operator new和operator delete，而不是new和delete。<br>operator new就像operator+一样，是可以重载的。<br>但是不能在全局对原型为void operator new(size_t size)这个原型进行重载，一般只能在类中进行重载。<br>如果类中没有重载operator new，那么调用的就是全局的::operator new来完成堆的分配。<br><br>同理，operator new[]、operator delete、operator delete[]也是可以重载的。</p>
</li>
<li><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解 "></a>讲解 <br></h2></li>
<li>placement new，只是operator new的一个重载的版本</li>
<li>placement new允许你在一个已经分配好的内存中（栈或者堆中）构造一个新的对象。<br>原型中void*p实际上就是指向一个已经分配好的内存缓冲区的的首地址。</li>
<li>placement new非常适合那些对时间要求比较高，长时间运行不希望被打断的应用程序(因为没有new去查询空间内存了，直接提前预定义好了)</li>
</ul>
</blockquote>
<ol>
<li>缓冲区提前分配，可以使用堆的空间，也可以使用栈的空间。所以分配方式有如下两种：</li>
</ol>
<p>class MyClass {…};<br>char <em>buf=new char[N</em>sizeof(MyClass)+sizeof(int)];<br>char buf[N*sizeof(MyClass)+sizeof(int)];</p>
<ol>
<li><p>对象的构造<br>MyClass * pClass=new(buf) MyClass; //new(buf) MyClass(int) 这里还可以这样用，给个传递值</p>
</li>
<li><p>对象的销毁<br> 一旦这个对象使用完毕，你必须显式的调用类的析构函数进行销毁对象。但此时内存空间不会被释放，以便其他的对象的构造。<br>pClass-&gt;~MyClass();</p>
</li>
<li><p>内存的释放<br> 如果缓冲区在堆中，那么调用delete[] buf 进行内存的释放。如果在栈中，那么在其作用域内有效，跳出作用域，内存自动释放。</p>
</li>
</ol>
<pre><code>template&lt;class T1,class T2&gt;
inline void _construct(T1* p,const T2&amp; value)
{
    new(p) T1(value);
}

template&lt;class T1,class T2&gt;
inline T1* _constructs(T1* p,const T2&amp; value)
{
    return new(p) T1[3];
}

class MemT {
public:
    int m_a;

    MemT(size_t a) { m_a = a; cout &lt;&lt; a &lt;&lt; endl;}
    ~MemT() {}
    void * (operator new) (size_t t, void *location)
    {
        return location;
    }
};

int _tmain(int argc, _TCHAR* argv[])
{
    int p = 0;
    int d[3] = {0};
    MemT* da = new (&amp;p) MemT(2);//先走操作符，再走构造 别忘了析构

    _construct(&amp;p, 3);
    _constructs(&amp;d, 2);

    system(&quot;pause&quot;);
    return 0;
}
//类的那块，本来就没啥代码，最多给个分配内存的判断和内存的再开辟吧。
//数组那块_constructs，有个遗憾，无法像第一个那样给参数进去。
//能用的场景：1、基本数据配子（给基类数据都开辟大小，通过这个来构造析构）也就STL敢用！
//2、节约内存，对已经使用了的内存，再次使用。感觉并无多大用
</code></pre><p>原作：<br><a href="http://www.cnblogs.com/younes/archive/2010/04/26/1721528.html" target="_blank" rel="external">http://www.cnblogs.com/younes/archive/2010/04/26/1721528.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Placement-new&quot;&gt;&lt;a href=&quot;#Placement-new&quot; class=&quot;headerlink&quot; title=&quot;Placement new&quot;&gt;&lt;/a&gt;Placement new&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>STL源码剖析(172)</title>
    <link href="https://xuecat.github.io/2016/08/10/172/"/>
    <id>https://xuecat.github.io/2016/08/10/172/</id>
    <published>2016-08-09T19:33:58.000Z</published>
    <updated>2016-08-29T13:28:57.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近被git上一个项目打击了；想想自己c++书籍都看了十多本了，以为可以睥睨了。唉！！虽然公司编程不允许模板，但是身为程序员还是有学的必要。这本书一定要看完。</p>
<hr>
<h4 id="1、STL版本众多"><a href="#1、STL版本众多" class="headerlink" title="1、STL版本众多"></a>1、STL版本众多</h4><p>stl版本众多，但是有些头文件有很大一长串的版权注释（以前在codeproject也发现的）。这些都是参照HP版本的。允许任何人免费使用、拷贝、修改、传播、贩卖这份文件，唯一需要遵守的是必须在所有文件加上HP版本声明。<strong>哈哈看来国外人也喜欢装逼，都希望往自己开源代码放版权声明。</strong></p>
</blockquote>
<h4 id="2、模板中的静态变量"><a href="#2、模板中的静态变量" class="headerlink" title="2、模板中的静态变量"></a>2、模板中的静态变量</h4><pre><code>template &lt;typename T&gt;
class testclass P{
    public:
        static int _data;
};
int testclass&lt;int&gt;::_data = 1;
int testclass&lt;char&gt;::_data = 2;

testclass&lt;int&gt; ob1;//ob1._data 1
testclass&lt;char&gt; ob2;//ob2._data 2
//我想,我如果我再用一层typedef来换容的话。这代码就好看多了！
</code></pre><h4 id="3、模板中的特殊设计"><a href="#3、模板中的特殊设计" class="headerlink" title="3、模板中的特殊设计"></a>3、模板中的特殊设计</h4><pre><code>template &lt;class i, class o&gt;
struct dd {};//由于是模板，可以运行任何类型，要判断指针，可以用ispont的std函数

template &lt;class T&gt;
struct dd &lt;T*, T*&gt; {};

template &lt;class T&gt;
struct dd &lt;const T*, T*&gt; {};
</code></pre><h4 id="4、模板类型可赋值"><a href="#4、模板类型可赋值" class="headerlink" title="4、模板类型可赋值"></a>4、模板类型可赋值</h4><pre><code>template&lt;class T, class R, size_t Bufsize = 0&gt;
struct deq{}
    deq() {cout &lt;&lt;ｂufsize;};
;
</code></pre><h4 id="5、模板操作函数"><a href="#5、模板操作函数" class="headerlink" title="5、模板操作函数"></a>5、模板操作函数</h4><pre><code>bool operator== &lt;&gt; (const stack&amp;, const stack&amp;);
</code></pre><h4 id="6、构造函数特例化"><a href="#6、构造函数特例化" class="headerlink" title="6、构造函数特例化"></a>6、构造函数特例化</h4><pre><code>template &lt;class key&gt; struct hash {
    void operator()() {cout &lt;&lt;＂ｈｅｈｅ＂ &lt;&lt; endl;}
};
template &lt;&gt; struct hash&lt;char&gt; {
    void operator()() {cout &lt;&lt;＂ｉｓ　ｃｈａｒ＂ &lt;&lt; endl;}
}
hash&lt;long&gt; t;//hehe
hash&lt;char&gt; d;//is char
</code></pre><h4 id="7、迭代器"><a href="#7、迭代器" class="headerlink" title="7、迭代器"></a>7、迭代器</h4><ul>
<li>vector就不讲了。<ul>
<li>template <class t="" ,="" class="" alloc="alloc"> <br>class vector {…};</class></li>
</ul>
</li>
<li>list环状双向链表<ul>
<li>template <class t,="" class="" alloc="alloc"> <br> class list {…};</class></li>
</ul>
</li>
<li>deque双向开口连续空间，可头尾操作。内存结构：元素是指针，指向一个更大的连续空间map，数据就放在map中。通过参数赋值来定义map大小。<ul>
<li>template<class t,="" class="" alloc="alloc," size_t="" bufsize="0"> <br> class deque{…};</class></li>
</ul>
</li>
<li>stack先进后出，不允许遍历行为（严格不是迭代器）</li>
<li>queue先进先出。</li>
<li>slist单向链表，空间更小，操作更快。</li>
<li>set 它的实值就是键值。自动排序 ,切不允许键值重复现象<ul>
<li>template <class key,="" class="" compare="less<key">, class Alloc = alloc&gt;<br> class set {…};</class></li>
</ul>
</li>
<li>map所有元素会根据元素键值自动排序。不允许键值重复现象<ul>
<li>template <class key,="" class="" t,="" compare="less" <key="">, class Alloc = alloc&gt;<br>class map {…};</class></li>
<li>map<int, int=""> d;<br><br>d.insert(make_pair(2, 3));<br><br>d.insert(map<int, int="">::value_type(2, 3));</int,></int,></li>
</ul>
</li>
<li>multiset、multimap都允许键值重复现象。</li>
</ul>
<h4 id="8、hash"><a href="#8、hash" class="headerlink" title="8、hash"></a>8、hash</h4><h4 id="普及下hash表知识"><a href="#普及下hash表知识" class="headerlink" title="普及下hash表知识"></a>普及下hash表知识</h4><p>迭代器多用于数据的存储，添加，删除，操作等；（而关联器set，map等）大多以红黑树为基础；<br> 但是当对存储数据希望以常数时间来搜寻时，<br>特别是大量的数据，使用hash表的时间优势便有了。</p>
<p><br>hash表是通过数组记录的方式来存储，之后又有一次探测、二次探测来对同一位置记录成一链表（具体可以看stl源码）</p>
<ul>
<li>hash_set　<ul>
<li>template <class value,="" class="" hashfcn="hash<Value">, class EqualKey = equal_to<value>, class Alloc = alloc&gt;<br><br>class hash_set {…};</value></class></li>
</ul>
</li>
<li>hash_map<ul>
<li>template <class key,="" class="" t,="" hashfcn="hash<Key">, class EqualKey = equal_to<key>, class Alloc = alloc&gt;<br><br>class hash_map {…};</key></class></li>
</ul>
</li>
<li>hash_multiset<ul>
<li>template <class value,="" class="" hashfcn="hash<Value">, class EqualKey = equal_to<key>, class Alloc = alloc&gt;<br><br>class hash_multiset {…};</key></class></li>
</ul>
</li>
<li>hash_multimap<ul>
<li>template <class key,="" class="" hashfcn="hash<Key">, class EqualKey = equal_to<key>, class Alloc = alloc&gt;<br><br>class hash_multimap {…};</key></class></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近被git上一个项目打击了；想想自己c++书籍都看了十多本了，以为可以睥睨了。唉！！虽然公司编程不允许模板，但是身为程序员还是有学的必要。这本书一定要看完。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1、STL版本众多&quot;&gt;&lt;a href=&quot;#1、STL版
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="c函数" scheme="https://xuecat.github.io/tags/c%E5%87%BD%E6%95%B0/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>STL函数学习(173)</title>
    <link href="https://xuecat.github.io/2016/08/10/173/"/>
    <id>https://xuecat.github.io/2016/08/10/173/</id>
    <published>2016-08-09T19:33:58.000Z</published>
    <updated>2016-08-29T13:28:52.240Z</updated>
    
    <content type="html"><![CDATA[<h4 id="std-enable-if"><a href="#std-enable-if" class="headerlink" title="std::enable_if"></a>std::enable_if</h4><p>源代码：</p>
<pre><code>template&lt;class _Ty&gt;
struct enable_if&lt;true, _Ty&gt;
{    // type is _Ty for _Test
typedef _Ty type;
};
</code></pre><p>其实它和static_assert一样，都是为了编译期间检查。常用使用在函数前，表面上给个函数返回值，但之前要进行判断。</p>
<h4 id="std-find"><a href="#std-find" class="headerlink" title="std::find"></a>std::find</h4><p>find第三个参数是value，如果要找自定义的类，只有重载函数</p>
<pre><code>template &lt;typename T&gt;
bool operator !=(const MyClass&lt;T&gt;&amp; item, T n)
{return ;}
</code></pre><h4 id="traits编程法"><a href="#traits编程法" class="headerlink" title="traits编程法"></a>traits编程法</h4><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">	<span class="number">1</span>：<span class="keyword">template</span> &lt;<span class="keyword">class</span> numT&gt;</div><div class="line">   <span class="number">2</span>: <span class="keyword">struct</span> float_traits &#123; &#125;;</div><div class="line">   <span class="number">3</span>:  </div><div class="line">   <span class="number">4</span>: <span class="keyword">struct</span> float_traits&lt;<span class="keyword">float</span>&gt; &#123;</div><div class="line">   <span class="number">5</span>:     <span class="keyword">typedef</span> <span class="keyword">float</span> float_type;</div><div class="line">   <span class="number">6</span>:     <span class="keyword">enum</span> &#123; max_exponent = FLT_MAX_EXP &#125;;</div><div class="line">   <span class="number">7</span>:     <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> float_type <span class="title">epsilon</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> FLT_EPSILON; &#125;</div><div class="line">   <span class="number">8</span>:     ...</div><div class="line">   <span class="number">9</span>: &#125;;</div><div class="line">  <span class="number">10</span>:  </div><div class="line">  <span class="number">11</span>: <span class="keyword">struct</span> float_traits&lt;<span class="keyword">double</span>&gt; &#123;</div><div class="line">  <span class="number">12</span>:     <span class="keyword">typedef</span> <span class="keyword">double</span> float_type;</div><div class="line">  <span class="number">13</span>:     <span class="keyword">enum</span> &#123; max_exponent = DBL_MAX_EXP &#125;;</div><div class="line">  <span class="number">14</span>:     <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> float_type <span class="title">epsilon</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> DBL_EPSILON; &#125;</div><div class="line">  <span class="number">15</span>:     ...</div><div class="line">  <span class="number">16</span>: &#125;;</div><div class="line">现在不管啥类型，模板的使用者都可以无差别使用max_exponent了。比如这儿有个矩阵类模板：</div><div class="line"></div><div class="line">   <span class="number">1</span>: <span class="keyword">template</span> &lt;<span class="keyword">class</span> numT&gt;</div><div class="line">   <span class="number">2</span>: <span class="keyword">class</span> matrix &#123;</div><div class="line">   <span class="number">3</span>:     <span class="keyword">public</span>:</div><div class="line">   <span class="number">4</span>:       <span class="keyword">typedef</span> numT num_type;</div><div class="line">   <span class="number">5</span>:       <span class="keyword">typedef</span> float_traits&lt;num_type&gt; traits_type;</div><div class="line">   <span class="number">6</span>:       <span class="function"><span class="keyword">inline</span> num_type <span class="title">epsilon</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> traits_type::epsilon(); &#125;</div><div class="line">   <span class="number">7</span>:       ...</div><div class="line">   <span class="number">8</span>: &#125;;</div></pre></td></tr></table></figure>
<h4 id="typename"><a href="#typename" class="headerlink" title="typename"></a>typename</h4><figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="number">_</span>InputIter, <span class="keyword">class</span> <span class="number">_</span>Tp&gt;</div><div class="line"><span class="keyword">typename</span> iterator_traits&lt;<span class="number">_</span>InputIter&gt;::<span class="function">difference_type</span></div><div class="line"><span class="title">count</span><span class="params">(<span class="number">_</span>InputIter <span class="number">__f</span>irst, <span class="number">_</span>InputIter <span class="number">__l</span>ast, <span class="keyword">const</span> <span class="number">_</span>Tp&amp; <span class="number">__</span>value)</span> &#123;</div><div class="line">  <span class="number">__</span>STL_REQUIRES(<span class="number">_</span>InputIter, <span class="number">_</span>InputIterator);</div><div class="line">  <span class="number">__</span>STL_REQUIRES(<span class="keyword">typename</span> iterator_traits&lt;<span class="number">_</span>InputIter&gt;::value_type,</div><div class="line">                 <span class="number">_</span>EqualityComparable);</div><div class="line">  <span class="number">__</span>STL_REQUIRES(<span class="number">_</span>Tp, <span class="number">_</span>EqualityComparable);</div><div class="line">  <span class="keyword">typename</span> iterator_traits&lt;<span class="number">_</span>InputIter&gt;::difference_type <span class="number">__</span>n = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> ( ; <span class="number">__f</span>irst != <span class="number">__l</span>ast; ++<span class="number">__f</span>irst)</div><div class="line">    <span class="keyword">if</span> (*<span class="number">__f</span>irst == <span class="number">__</span>value)</div><div class="line">      ++<span class="number">__</span>n;</div><div class="line">  <span class="keyword">return</span> <span class="number">__</span>n;</div><div class="line">&#125;</div><div class="line"><span class="comment">//1、用在模板中，来声明是类型</span></div><div class="line"><span class="comment">//2、用在类型声明，表示下面的是个类型。不然typename T::iterator *iter就会被解析为俩数相乘。</span></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="std-bind"><a href="#std-bind" class="headerlink" title="std::bind"></a>std::bind</h4><p>这个函数是必须和function一起讲的，但是多个绑定情况就有点特殊，先列出来：</p>
<figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">TestFunc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> c, <span class="keyword">float</span> f)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">auto</span> bindFunc1 = bind(TestFunc, <span class="built_in">std</span>::placeholders::<span class="number">_1</span>, <span class="string">'A'</span>, <span class="number">100.1</span>);</div><div class="line">    bindFunc1(<span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"=================================\n"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> bindFunc2 = bind(TestFunc, <span class="built_in">std</span>::placeholders::<span class="number">_2</span>, <span class="built_in">std</span>::placeholders::<span class="number">_1</span>, <span class="number">100.1</span>);</div><div class="line">    bindFunc2(<span class="string">'B'</span>, <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"=================================\n"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> bindFunc3 = bind(TestFunc, <span class="built_in">std</span>::placeholders::<span class="number">_2</span>, <span class="built_in">std</span>::placeholders::<span class="number">_1</span>, <span class="built_in">std</span>::placeholders::<span class="number">_3</span>);</div><div class="line">    bindFunc3(<span class="string">'C'</span>, <span class="number">30</span>, <span class="number">100.1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;<span class="comment">//绑定第几个placeholders就按照参数顺序输入第几个。</span></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="std-function"><a href="#std-function" class="headerlink" title="std::function"></a>std::function</h4><p>看到这个函数（表明是函数其实是对象），我只想说叼到没朋友！！！！！！<br><br>代码伺候：</p>
<figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::function&lt; <span class="keyword">int</span>(<span class="keyword">int</span>)&gt; Functional;</div><div class="line"></div><div class="line"><span class="comment">// 普通函数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">TestFunc</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Lambda表达式</span></div><div class="line"><span class="keyword">auto</span> lambda = [](<span class="keyword">int</span> a)-&gt;<span class="keyword">int</span>&#123; <span class="keyword">return</span> a; &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 仿函数(functor)</span></div><div class="line"><span class="keyword">class</span> Functor</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 1.类成员函数</span></div><div class="line"><span class="comment">// 2.类静态函数</span></div><div class="line"><span class="keyword">class</span> TestClass</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">VirtualMember</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="keyword">return</span> a; &#125;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">ClassMember</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="keyword">return</span> a; &#125;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">StaticMember</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="keyword">return</span> a; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//多态</span></div><div class="line"><span class="keyword">class</span> DemoClass : <span class="keyword">public</span> TestClass &#123;</div><div class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">VirtualMember</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; <span class="keyword">return</span> a + <span class="number">1</span>; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 普通函数</span></div><div class="line">    Functional = TestFunc;</div><div class="line">    <span class="keyword">int</span> result = Functional(<span class="number">10</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"普通函数："</span>&lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Lambda表达式</span></div><div class="line">    Functional = lambda;</div><div class="line">    result = Functional(<span class="number">20</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Lambda表达式："</span>&lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 仿函数</span></div><div class="line">    Functor testFunctor;</div><div class="line">    Functional = testFunctor;</div><div class="line">    result = Functional(<span class="number">30</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"仿函数："</span>&lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 类成员函数</span></div><div class="line">    TestClass testObj;</div><div class="line">    Functional = <span class="built_in">std</span>::bind(&amp;TestClass::ClassMember, testObj, <span class="built_in">std</span>::placeholders::<span class="number">_1</span>);</div><div class="line">    result = Functional(<span class="number">40</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"类成员函数："</span>&lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 类静态函数</span></div><div class="line">    Functional = TestClass::StaticMember;</div><div class="line">    result = Functional(<span class="number">50</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"类静态函数："</span>&lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="comment">//多态</span></div><div class="line">	TestClass* p = <span class="keyword">new</span> DemoClass;</div><div class="line">	Functional = <span class="built_in">std</span>::bind(&amp;TestClass::VirtualMember, p, <span class="number">2</span>);</div><div class="line">	<span class="built_in">cout</span> &lt;&lt;Functional(<span class="number">5</span>);<span class="comment">//3</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//又一个灵活用法</span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt;&gt; binops = </div><div class="line">&#123;</div><div class="line">	&#123; <span class="string">'+'</span>, add &#125;,</div><div class="line">	&#123; <span class="string">'-'</span>, minus&lt;<span class="keyword">int</span>&gt;() &#125;,</div><div class="line">	&#123; <span class="string">'*'</span>, [](<span class="keyword">int</span> i, <span class="keyword">int</span> j)&#123;<span class="keyword">return</span> i - j; &#125; &#125;,</div><div class="line">	&#123; <span class="string">'/'</span>, divide() &#125;,</div><div class="line">	&#123; <span class="string">'%'</span>, mod &#125;,</div><div class="line">&#125;;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; binops[<span class="string">'+'</span>](<span class="number">10</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; binops[<span class="string">'-'</span>](<span class="number">10</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; binops[<span class="string">'*'</span>](<span class="number">10</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; binops[<span class="string">'/'</span>](<span class="number">10</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; binops[<span class="string">'%'</span>](<span class="number">10</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="reserve、resize、capacity、size"><a href="#reserve、resize、capacity、size" class="headerlink" title="reserve、resize、capacity、size"></a>reserve、resize、capacity、size</h4><blockquote>
<p>内容就不讲了，一一对应的！！！点下就好，vector和string都是一样的，只增长，2*n。</p>
</blockquote>
<p>####</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;std-enable-if&quot;&gt;&lt;a href=&quot;#std-enable-if&quot; class=&quot;headerlink&quot; title=&quot;std::enable_if&quot;&gt;&lt;/a&gt;std::enable_if&lt;/h4&gt;&lt;p&gt;源代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;temp
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="c函数" scheme="https://xuecat.github.io/tags/c%E5%87%BD%E6%95%B0/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>工具代码(170)</title>
    <link href="https://xuecat.github.io/2016/08/04/170/"/>
    <id>https://xuecat.github.io/2016/08/04/170/</id>
    <published>2016-08-03T19:33:58.000Z</published>
    <updated>2016-08-27T22:33:56.310Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line">	<span class="keyword">class</span> CSeparaString</div><div class="line">	&#123;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		CSeparaString() &#123; m_strBuffer.Empty(); &#125;</div><div class="line">		~CSeparaString() &#123;&#125;</div><div class="line">	</div><div class="line">		<span class="function">VOID	<span class="title">SetBuffer</span><span class="params">(LPCTSTR lpsz)</span> </span>&#123; m_strBuffer = lpsz; &#125;</div><div class="line">		<span class="function">CString <span class="title">GetBuffer</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_strBuffer; &#125;</div><div class="line">	</div><div class="line">		<span class="function">VOID	<span class="title">SetSepara</span><span class="params">(TCHAR ch)</span> </span>&#123; m_chSepara = ch; &#125;</div><div class="line">		</div><div class="line">		<span class="function">VOID	<span class="title">AppendElement</span><span class="params">(<span class="keyword">int</span> ne)</span> </span>&#123;</div><div class="line">			TCHAR buffer[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">			<span class="number">_</span>itot_s(ne, buffer, <span class="number">4</span>, <span class="number">10</span>);</div><div class="line">			m_strBuffer.Append(CString(m_chSepara)); </div><div class="line">			m_strBuffer.Append(buffer);</div><div class="line">		&#125;</div><div class="line">		<span class="function">VOID	<span class="title">AppendElement</span><span class="params">(LPCTSTR lpsz)</span> </span>&#123; m_strBuffer.Append(CString(m_chSepara)); m_strBuffer.Append(lpsz); &#125;</div><div class="line">		<span class="function">VOID	<span class="title">GetElement</span><span class="params">(CStringArray &amp;arry)</span> </span>&#123;</div><div class="line">			<span class="keyword">int</span> npos = m_strBuffer.Find(m_chSepara);</div><div class="line">			<span class="keyword">while</span> (npos != m_strBuffer.GetLength())</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> epos = m_strBuffer.Find(m_chSepara, npos + <span class="number">1</span>);</div><div class="line">				(epos == <span class="number">-1</span>) &amp;&amp; (epos = m_strBuffer.GetLength());</div><div class="line">				arry.Add(m_strBuffer.Mid(npos + <span class="number">1</span>, epos - npos - <span class="number">1</span>));</div><div class="line">				npos = epos;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="function">CString <span class="title">GetElement</span><span class="params">(<span class="keyword">int</span> nelement)</span> </span>&#123;</div><div class="line">			<span class="keyword">int</span> npos = <span class="number">-1</span>;</div><div class="line">			<span class="keyword">int</span> epos = m_strBuffer.Find(m_chSepara);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nelement; i++)</div><div class="line">			&#123;</div><div class="line">				npos = epos;</div><div class="line">				epos = m_strBuffer.Find(m_chSepara, npos + <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">			(epos == <span class="number">-1</span>) &amp;&amp; (epos = m_strBuffer.GetLength());</div><div class="line">			<span class="keyword">return</span> m_strBuffer.Mid(npos + <span class="number">1</span>, epos - npos - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">		TCHAR	m_chSepara;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">		CString m_strBuffer;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	CRect CDlgImportPicture::CalculateMaxRect(<span class="keyword">const</span> CRect *prect, <span class="keyword">int</span> numerator, <span class="keyword">int</span> denominator)</div><div class="line">	&#123;</div><div class="line">		CRect rtRE;</div><div class="line">		<span class="keyword">if</span> (prect)</div><div class="line">		&#123;</div><div class="line">			rtRE = prect;</div><div class="line">	</div><div class="line">			<span class="comment">//先算宽高度基准</span></div><div class="line">			<span class="keyword">if</span> (prect-&gt;Width() * denominator &gt; numerator * prect-&gt;Height())<span class="comment">//宽过多,高基准</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> offset = prect-&gt;Width() - ((prect-&gt;Height() * numerator)/denominator);</div><div class="line">				rtRE.left += offset/<span class="number">2</span>;</div><div class="line">				rtRE.right -= offset/<span class="number">2</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span><span class="comment">//高过多,宽基准</span></div><div class="line">			&#123;</div><div class="line">				<span class="keyword">int</span> offset = prect-&gt;Height() - ((prect-&gt;Width() * denominator)/numerator);</div><div class="line">				rtRE.top += offset/<span class="number">2</span>;</div><div class="line">				rtRE.bottom -= offset/<span class="number">2</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> rtRE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 时间</div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> TickStart() DWORD dwstart = GetTickCount(), dwend = 0;\</span></div><div class="line">		TCHAR buffer[1024] = &#123;0&#125;;\</div><div class="line">		TCHAR thisname[1024] = &#123;0&#125;;\</div><div class="line">		_ltot_s(int(this), thisname, 1024, 10);\</div><div class="line">	</div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> TickOutName(str) OutputDebugString(CString(thisname) + _T(<span class="meta-string">" :"</span>) + str);\</span></div><div class="line">		OutputDebugString(_T(<span class="meta-string">"\n"</span>));\</div><div class="line">	</div><div class="line">	<span class="meta">#<span class="meta-keyword">define</span> TickOutPut(str) dwend = GetTickCount();\</span></div><div class="line">		_ltot_s(dwend - dwstart, buffer, 1024, 10);\</div><div class="line">		OutputDebugString(CString(thisname) + _T(<span class="meta-string">" :"</span>) + str);\</div><div class="line">		OutputDebugString(buffer);\</div><div class="line">		OutputDebugString(_T(<span class="meta-string">"\n"</span>));\</div><div class="line">		dwstart = dwend;\</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;figcaption&gt;&lt;span&gt;++&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;
    
    </summary>
    
      <category term="配置" scheme="https://xuecat.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="工具" scheme="https://xuecat.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>微软的莫名好用的类(171)</title>
    <link href="https://xuecat.github.io/2016/08/04/171/"/>
    <id>https://xuecat.github.io/2016/08/04/171/</id>
    <published>2016-08-03T19:33:58.000Z</published>
    <updated>2016-08-27T22:34:43.037Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近要写个控件，要运行时动态改变。我去！！发现微软有个莫名好用的类，完全可以达到。<br><br>Crecttracker这个类。只是注意它的可能有以下问题：<br></p>
<ul>
<li><p>1、SetCursor无果，这个版本不对，要自己添加鼠标资源，并把资源ID改成以下<br>AFX_IDC_TRACK4WAY<br><br>AFX_IDC_TRACKNESW    <br><br>AFX_IDC_TRACKNS<br><br>AFX_IDC_TRACKNWSE<br><br>AFX_IDC_TRACKWE<br></p>
</li>
<li><p>2、只能响应Lbuttondown，因为Track是个阻塞函数。哈哈！剩下的自己百度了。。</p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近要写个控件，要运行时动态改变。我去！！发现微软有个莫名好用的类，完全可以达到。&lt;br&gt;&lt;br&gt;Crecttracker这个类。只是注意它的可能有以下问题：&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、SetCursor无果，这个版本不对，要自己
    
    </summary>
    
      <category term="Windows" scheme="https://xuecat.github.io/categories/Windows/"/>
    
    
      <category term="c函数" scheme="https://xuecat.github.io/tags/c%E5%87%BD%E6%95%B0/"/>
    
      <category term="mfc" scheme="https://xuecat.github.io/tags/mfc/"/>
    
  </entry>
  
  <entry>
    <title>C++11再次陪读(169)</title>
    <link href="https://xuecat.github.io/2016/07/16/169/"/>
    <id>https://xuecat.github.io/2016/07/16/169/</id>
    <published>2016-07-15T19:33:58.000Z</published>
    <updated>2016-08-28T05:47:11.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近无聊，读下c-11发现有些东西都忘了。开个页面，来和书同步更新"><a href="#最近无聊，读下c-11发现有些东西都忘了。开个页面，来和书同步更新" class="headerlink" title="最近无聊，读下c++11发现有些东西都忘了。开个页面，来和书同步更新"></a>最近无聊，读下c++11发现有些东西都忘了。开个页面，来和书同步更新</h3><h4 id="1、static-assert-条件，提示字符-这个函数会在编译期间执行。"><a href="#1、static-assert-条件，提示字符-这个函数会在编译期间执行。" class="headerlink" title="1、static_assert(条件，提示字符); 这个函数会在编译期间执行。"></a>1、static_assert(条件，提示字符); 这个函数会在编译期间执行。</h4><p><img src="/picture/169.jpg" alt=""><br><br>如上图；<br><br>编译器在预编译期间就会报错，无法编译下去。所以里面的条件无法是动态的变量之类的。</p>
<h4 id="2、noexcept和throw-，这个是11和98两个不同的表示方式而已。都一样，如果在函数里面抛的话都会导致程序强制中断。（vs2013无法识别noexcept）"><a href="#2、noexcept和throw-，这个是11和98两个不同的表示方式而已。都一样，如果在函数里面抛的话都会导致程序强制中断。（vs2013无法识别noexcept）" class="headerlink" title="2、noexcept和throw()，这个是11和98两个不同的表示方式而已。都一样，如果在函数里面抛的话都会导致程序强制中断。（vs2013无法识别noexcept）"></a>2、noexcept和throw()，这个是11和98两个不同的表示方式而已。都一样，如果在函数里面抛的话都会导致程序强制中断。（vs2013无法识别noexcept）</h4><h4 id="3、final、override、-declspec-novtable"><a href="#3、final、override、-declspec-novtable" class="headerlink" title="3、final、override、__declspec(novtable)."></a>3、final、override、__declspec(novtable).</h4><ul>
<li>这个是11的，基类使用。专门放声明虚函数后面（定义放不下）；基类对虚函数使用这个修饰符后，子类就无法继承重写那个函数（连同名函数都不允许）</li>
<li>这个是11的，派生类使用。专门放声明虚函数后面；派生类对虚函数使用这个修饰符后，编译器会从基类去找此函数是否是要继承的虚函数（就是和编译器一个君子协定而已），不是就报错。</li>
<li>这个是Microsoft c++。作为接口的基类虽然有纯虚函数声明，但是被继承过后依旧会被分配虚函数表的空间。由于接口基类本来就是可以完全忽略的，所以用这个限定符来把那个表去掉。 <strong>但是使用的时候，最好和纯虚函数一起使用（网上说编译器会默认把函数全变成纯虚，但是试了下vs2013，完全不是的。发现它的作用只在去表，没其他的。）</strong></li>
</ul>
<h4 id="4、using构造特性"><a href="#4、using构造特性" class="headerlink" title="4、using构造特性"></a>4、using构造特性</h4><p>struct A {A(int i){} A(int d, double j)}；<br><br>struct B :　Ａ{using A::A}；<br><br>派生类的构造函数要和基类一样（包括内容），为了方便书写而使用的语法。</p>
<h4 id="5、构造函数委派"><a href="#5、构造函数委派" class="headerlink" title="5、构造函数委派"></a>5、构造函数委派</h4><p>个人十分赞扬这种思维：</p>
<pre><code>class Info {
    public:
        Info() : Info(1) {}
        Info(int i):Info(i, &apos;a&apos;) {}
        Info(char e):Info(1, e){}
    private:
        Info(int i, char e):type(i), name(e) {}
        int type;
        char name;
}
//暴漏的接口全委托给private的构造函数了。唉，这个模板好合适哟！！！
</code></pre><h4 id="6、右值和左值"><a href="#6、右值和左值" class="headerlink" title="6、右值和左值"></a>6、右值和左值</h4><figure class="highlight"><figcaption><span>++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class testto</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">	testto(int n):m_p(new int(n)) &#123;</div><div class="line">		int d = 5;</div><div class="line">	&#125;</div><div class="line">	~testto() &#123; </div><div class="line">		delete m_p; </div><div class="line">	&#125;</div><div class="line">	testto(testto&amp; d)&#123;</div><div class="line">		int a = 32;</div><div class="line">	&#125;</div><div class="line">	testto(testto&amp;&amp; e) :m_p(e.m_p) &#123;</div><div class="line">		e.m_p = NULL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">public:</div><div class="line">	int * m_p;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class sudtest</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">	sudtest() :p(new int(3)), h(2)&#123;</div><div class="line">		int da = 45;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	~sudtest()&#123; </div><div class="line">		delete p; </div><div class="line">	&#125;</div><div class="line">	sudtest&amp; operator = (sudtest&amp; d) &#123;</div><div class="line">		int a = 2;</div><div class="line">	&#125;</div><div class="line">	sudtest(sudtest &amp;&amp; e) : p(e.p), h(std::move(e.h))&#123;</div><div class="line">		e.p = NULL; </div><div class="line">	&#125;</div><div class="line"></div><div class="line">public:</div><div class="line">	testto h;</div><div class="line">	int *p;</div><div class="line">&#125;;</div><div class="line">sudtest gettem() &#123; </div><div class="line">	sudtest t = sudtest(); </div><div class="line">	return t; &#125;</div><div class="line"></div><div class="line">int _tmain(int argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">	</div><div class="line">	sudtest a(gettem());</div><div class="line"></div><div class="line">	cout &lt;&lt; *a.p &lt;&lt; endl;</div><div class="line">	system("pause");</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>《C++ 0x 之左值与右值》文中提到 std::forward() 和 std::move()。本文开头对之补充一句：</p>
<pre><code>在操作函数返回值或函数参数时，匿名左值仍然为左值，左值可以具名；匿名右值仍然为右值，右值一旦具名成功，立即转变为左值
</code></pre><ul>
<li>先谈move吧，为了节约拷贝函数的空间，要使它走移动构造函数；</li>
<li>1、e由于被命名了所以是左值，必须用move把e.h从左值转化成右值才能调用到testto的移动构造函数。</li>
<li>2、本身传进来的e和t是一样的都是0x71f48a。临时变量就是指源。</li>
<li>3、gettem（）函数本身返回的就是临时变量，因为没有移动函数才会去寻复制函数。所以sudtest的移动函数是理所当然的，testto的移动函数是move使之。</li>
</ul>
<blockquote>
<p>在看c++折叠规则：总是优先为左值引用，再右值。int&amp; &amp;&amp;t -&gt; int&amp; t, int&amp;&amp; &amp;&amp;t -&gt; int&amp;&amp; t </p>
</blockquote>
<pre><code>fun(int &amp;&amp;m)
fun(int &amp; m)

template&lt;typename T&gt;
fun1(T&amp;&amp; t) {fun(forward&lt;T&gt;(t);)}

int a = 4;
fun1(a)//a此时是左值，调用和fun(t);无区别。
fun1(move(a))//要使用右值了，fun1中对t命名了所以是左值，所以要用forward来转换一下。这就是完美转发。
</code></pre><h4 id="7、隐式转换"><a href="#7、隐式转换" class="headerlink" title="7、隐式转换"></a>7、隐式转换</h4><p>对类进行</p>
<pre><code>operator bool() const {
    return ;
}

//如果对这个隐式转化加个explicit，那么只有构造函数才会传递了。
</code></pre><h4 id="8、POD模型"><a href="#8、POD模型" class="headerlink" title="8、POD模型"></a>8、POD模型</h4><p>1、不定义基本默认函数（构造、析构、移动、复制等）。<br>2、没有虚函数、<br>3、父类和成员是POD类型。</p>
<h4 id="9、智能指针"><a href="#9、智能指针" class="headerlink" title="9、智能指针"></a>9、智能指针</h4><p>太多了，就说下：</p>
<pre><code>auto_ptr、unique_ptr、shared_ptr、
</code></pre><h4 id="10、For"><a href="#10、For" class="headerlink" title="10、For"></a>10、For</h4><pre><code>for(int &amp;e : a) {}//引用;&apos;/[
for(int e: a){}
</code></pre><h4 id="11、多线程"><a href="#11、多线程" class="headerlink" title="11、多线程"></a>11、多线程</h4><p>c++11是支持多线程编程的。专门使用它的c++函数，这样就可以在多平台使用了。</p>
<h4 id="12、NULL"><a href="#12、NULL" class="headerlink" title="12、NULL"></a>12、NULL</h4><p>不同编译器会对NULL不同解释，gcc就是__null，mfc就是0。所以c++11用nullptr来统一。</p>
<h4 id="13、类与默认函数"><a href="#13、类与默认函数" class="headerlink" title="13、类与默认函数"></a>13、类与默认函数</h4><p>6个基本函数（移动多了构造和拷贝）、8个默认操作符函数。</p>
<h4 id="14、内存对齐描述符alignas、alignof"><a href="#14、内存对齐描述符alignas、alignof" class="headerlink" title="14、内存对齐描述符alignas、alignof"></a>14、内存对齐描述符alignas、alignof</h4><pre><code>struct alignas(32) T {
    int r;
    int g;
    int b;
};
alignof(T)；//32;前者是设置对齐字节大小，后者是获取对齐字节大小。
</code></pre><h4 id="15、Unicode支持"><a href="#15、Unicode支持" class="headerlink" title="15、Unicode支持"></a>15、Unicode支持</h4><pre><code>u8&quot;asdf&quot;//utf8字符;
u&quot;asdf&quot;//utf16字符；
U&quot;asdf&quot;//utf32字符;

11说c++支持各种字符的互相转换了，使用codecvt；但是相关资料和代码却一直没看到，只好先放放吧。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最近无聊，读下c-11发现有些东西都忘了。开个页面，来和书同步更新&quot;&gt;&lt;a href=&quot;#最近无聊，读下c-11发现有些东西都忘了。开个页面，来和书同步更新&quot; class=&quot;headerlink&quot; title=&quot;最近无聊，读下c++11发现有些东西都忘了。开个页面
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="c函数" scheme="https://xuecat.github.io/tags/c%E5%87%BD%E6%95%B0/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>树莓派(168)</title>
    <link href="https://xuecat.github.io/2016/07/01/168/"/>
    <id>https://xuecat.github.io/2016/07/01/168/</id>
    <published>2016-06-30T19:33:58.000Z</published>
    <updated>2016-08-27T22:31:32.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、系统"><a href="#1、系统" class="headerlink" title="1、系统"></a>1、系统</h4><ul>
<li>官方的noobs系统要有界面才行，不然安装就没法进行了。所以我喜欢直接写raspbin系统</li>
<li>noobs系统安装最简单，直接先用SDFormat格式化了复制文件进去就好。其他系统用格式化后用Win32DiskImager去写。</li>
</ul>
<h4 id="2、WiFi路由器坑点"><a href="#2、WiFi路由器坑点" class="headerlink" title="2、WiFi路由器坑点"></a>2、WiFi路由器坑点</h4><ul>
<li>sudo service hostapd restart完全无法启动dhcpdc服务，就算激活也是退出的。只能用sudo hostapd -dd /etc/hostapd/hostapd.conf来启动。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、系统&quot;&gt;&lt;a href=&quot;#1、系统&quot; class=&quot;headerlink&quot; title=&quot;1、系统&quot;&gt;&lt;/a&gt;1、系统&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;官方的noobs系统要有界面才行，不然安装就没法进行了。所以我喜欢直接写raspbin系统&lt;/li&gt;
&lt;li&gt;n
    
    </summary>
    
      <category term="科技爱好" scheme="https://xuecat.github.io/categories/%E7%A7%91%E6%8A%80%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="life" scheme="https://xuecat.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>JS语法(167)</title>
    <link href="https://xuecat.github.io/2016/05/25/167/"/>
    <id>https://xuecat.github.io/2016/05/25/167/</id>
    <published>2016-05-24T19:33:58.000Z</published>
    <updated>2016-08-28T16:55:13.453Z</updated>
    
    <content type="html"><![CDATA[<p>  大部分的语法记录在笔记本上，现在写烦了，blog上面写点吧。</p>
<h4 id="function的this指针"><a href="#function的this指针" class="headerlink" title="function的this指针"></a>function的this指针</h4><pre><code>void function() { var a = 3; this.a = 5; console.log(a, this.a);}();
//以上是执行一个匿名函数。
//js来说，确实函数也是一个对象。但是像这种调用匿名函数，好像开辟的空间是开辟在全局上面的，
//所以this指向的是全局this。另外如果使用严格模式的话，如果this指向全局就会出错，
//    所以上面句子全局模式下一定错误。

function Person(name, age, job) {
    this.name = name;
    this.age = age;
    this.sayname = function() {console.log(this.name)};
}
var persion = new Person(&quot;wq&quot;, 22, &quot;programmar&quot;);
这个时候，用了一个new，使得开辟了一个新的对象。这时的this就是函数本身了。
第二个this，是因为function函数拥有了对象，this就一定指向那个对象呀。
</code></pre><h4 id="原型模式和实例模式"><a href="#原型模式和实例模式" class="headerlink" title="原型模式和实例模式"></a>原型模式和实例模式</h4><p>对于对象的构造函数，其属性有两种：<br></p>
<pre><code>function person() {
    this.name = &quot;ta&quot;;//实例模式的属性
    person.prototype.name = &quot;ba&quot;;//原型模式的属性
}
//上面俩个属性都可以被var per = new person(); per.name访问到
//per.name = &quot;tc&quot;;是实例属性 
//区别：当对象添加一个实例属性时，就会屏蔽原型的同名属性。
//判断：per.hasOwnProperty(&quot;name&quot;);是否存在实例属性
//hasPrototypeProperty（per, &quot;name&quot;）原型是否拥有且未被屏蔽
</code></pre><p>原型的弊端：它如同c++类里面的static变量一样。<br>定义的属性属于person.prototype，而不是属于var变量对象。</p>
<p>原型必要：constructor属性最好必须设置，这样就能动态识别对象类型了。</p>
<h4 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h4><p>先看代码比较：</p>
<pre><code>1function createfun() {
    var result = new Array();
    for (var i = 0； i &lt; 10; i++) {
        return [i] = function() {return i;};
    }
}
//数组结果：全10；

2function createfun() {
    var result = new Array();
    for (var i = 0; i &lt; 10; i++) {
        result[i] = function(num) {return function () {return num;};}(i);
    }
}
//数组结果:按照i来分配
//这样写的好处是调用时，直接result[i]()就行了。即使有个num参数，也会默认进入的。
</code></pre><p>原因：函数创建时，会产生作用链。内部活动对象第一位，外部活动对象依次递增。<br></p>
<p>当执行匿名函数时，匿名函数依旧能找到在作用链中找到i，而此时的i在经过循环玩了后是10，所以一直返回10；<br><br><br>值得一提的是，就是外部函数执行完了，但是内部函数只有拥有引用，就不会对对作用链进行销毁，所以匿名函数依旧能访问到i；</p>
<h4 id="this对象"><a href="#this对象" class="headerlink" title="this对象"></a>this对象</h4><pre><code>var name = &quot;all&quot;;
var ob = {
    name: &quot;simple&quot;;
    getname:function() {
        return function() {return this.name;}
    };
};

//匿名函数的默认this通常是全局的，所以这个不能达到预期效果。
//var that = this;
//return function() {return that.name;}这句替换了便好。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  大部分的语法记录在笔记本上，现在写烦了，blog上面写点吧。&lt;/p&gt;
&lt;h4 id=&quot;function的this指针&quot;&gt;&lt;a href=&quot;#function的this指针&quot; class=&quot;headerlink&quot; title=&quot;function的this指针&quot;&gt;&lt;/a&gt;f
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="代码编写" scheme="https://xuecat.github.io/tags/%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>数组和指针进阶(166)</title>
    <link href="https://xuecat.github.io/2016/05/18/166/"/>
    <id>https://xuecat.github.io/2016/05/18/166/</id>
    <published>2016-05-17T19:33:58.000Z</published>
    <updated>2016-08-28T05:45:34.351Z</updated>
    
    <content type="html"><![CDATA[<p>来看一个代码和结果（比较新奇的写法吧，数组）：</p>
<p><img src="/picture/img/166.jpg" alt=""></p>
<p>1、先讲下数组的初始化赋值。结果是<br><br>0 0 0 0<br><br>1 0 0 0<br><br>2 0 0 0<br><br>4 0 0 0<br><br>结果自己想，很有意思！</p>
<p>2、从输出结果讲下。</p>
<p>这是栈的特性，从相邻内存中开辟空间。</p>
<p>所以造成了，位置相近的情况。再说位置相近的情况下，用指针直接访问全部边可以访问到数据了。<br><br>（另外，直接访问编译器是不允许的。所以要用void<em> ，int </em>指针来转换一下，骗过编译器能编译过。）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来看一个代码和结果（比较新奇的写法吧，数组）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/picture/img/166.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;1、先讲下数组的初始化赋值。结果是&lt;br&gt;&lt;br&gt;0 0 0 0&lt;br&gt;&lt;br&gt;1 0 0 0&lt;br&gt;&lt;br&gt;2 0 
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>拖拽事项(165)</title>
    <link href="https://xuecat.github.io/2016/05/05/165/"/>
    <id>https://xuecat.github.io/2016/05/05/165/</id>
    <published>2016-05-04T19:33:58.000Z</published>
    <updated>2016-08-28T06:02:45.650Z</updated>
    
    <content type="html"><![CDATA[<pre><code>dodragdrop 一直出发不了拖拽事件，后面发现是没有初始化ole。
</code></pre><p>mfc程序调用：afxoleinit。<br><br>但是这个函数只能用于主进程，且程序会自动释放。</p>
<p>dll的话用：看情况使用CoInitialize和OleInitialize（当然必须自己调用 OleUninitialize、CoUninitialize来释放）<br><br>前者是com环境初始化，后者是前者的更近一步，ole环境初始化。当然剪切板是ole环境下的哟！</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;dodragdrop 一直出发不了拖拽事件，后面发现是没有初始化ole。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mfc程序调用：afxoleinit。&lt;br&gt;&lt;br&gt;但是这个函数只能用于主进程，且程序会自动释放。&lt;/p&gt;
&lt;p&gt;dll的话用：看情况使用CoInit
    
    </summary>
    
      <category term="Windows" scheme="https://xuecat.github.io/categories/Windows/"/>
    
    
      <category term="杂项" scheme="https://xuecat.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>restrict关键字(163)</title>
    <link href="https://xuecat.github.io/2016/04/01/163/"/>
    <id>https://xuecat.github.io/2016/04/01/163/</id>
    <published>2016-03-31T19:33:58.000Z</published>
    <updated>2016-08-27T22:40:33.540Z</updated>
    
    <content type="html"><![CDATA[<pre><code>int f (int *restrict x, int *restrict y)
{
    ...
    *x = 0;
    *y = 1;
    return 0;
}
//这个关键字是编译器优化关键字。
//首先，x和y这两个参数是相同类型的
//所以执行的时候可能，x，y指向同一个地方，y改变定会改变x
//所以编译器为了正确，在x，y每次操作都会重新读取一次。
//restrict为此而生，告诉编译器，这两个相同类型的不指向同一地方，你可以自己优化。所以接下来的操作就会直接读缓存。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;int f (int *restrict x, int *restrict y)
{
    ...
    *x = 0;
    *y = 1;
    return 0;
}
//这个关键字是编译器优化关键字。
//首先，x和y这两个参数是相同类型的

    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Electron学习(164)</title>
    <link href="https://xuecat.github.io/2016/02/27/164/"/>
    <id>https://xuecat.github.io/2016/02/27/164/</id>
    <published>2016-02-26T19:33:58.000Z</published>
    <updated>2016-08-28T16:54:42.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="process-platform"><a href="#process-platform" class="headerlink" title="process.platform"></a>process.platform</h1><p>The variable to use would be process.platform</p>
<p>On Mac the variable returns darwin. On Windows, it returns win32 (even on 64 bit).</p>
<p>Possible values are: ‘darwin’, ‘freebsd’, ‘linux’, ‘sunos’ or ‘win32’</p>
<p>I just set this at the top of my jakeFile:</p>
<p>var isWin = /^win/.test(process.platform);</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;process-platform&quot;&gt;&lt;a href=&quot;#process-platform&quot; class=&quot;headerlink&quot; title=&quot;process.platform&quot;&gt;&lt;/a&gt;process.platform&lt;/h1&gt;&lt;p&gt;The variable t
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
      <category term="错误认识" scheme="https://xuecat.github.io/tags/%E9%94%99%E8%AF%AF%E8%AE%A4%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>React Native CSS(162)</title>
    <link href="https://xuecat.github.io/2016/02/27/162/"/>
    <id>https://xuecat.github.io/2016/02/27/162/</id>
    <published>2016-02-26T19:33:58.000Z</published>
    <updated>2016-08-28T06:17:47.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h2><p>就是说，所有带flex属性的子容器，flex值相加得到一个总数，该容器占父容器的比重就是这个容器flex值除以总flex值</p>
<p>举个例子，<br>你要实现一排图片，平分父容器的宽度，就可以先设置父容器的flexDirection:’row’<br>然后所有图片设为flex:1</p>
<p> 要和flexDirection，alignItems,justyContent这些属性配合</p>
<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><pre><code>&lt;Image source={require(&apos;./android/app/src/main/res/drawable/ic_launcher.png&apos;)} /&gt;
&lt;/br&gt; **./** 指的是当前js代码文件的当前路径

&lt;Image source={{uri:'http://i1.s.hjfile.cn/entry/201405/0d2b3417-c6fe-48cd-9199-6278fa0e6041.jpg'}}  style={{width:100,height:100}} /&gt;
</code></pre><h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><p><a href="http://jamestw.logdown.com/posts/257890-257890-reactjs-prop" target="_blank" rel="external">查看链接学习地址！！！</a></p>
<p>这个只是为了规范属性用的，比如数字属性用 number:’string’机会出错。</p>
<h2 id="dexDug"><a href="#dexDug" class="headerlink" title="dexDug"></a>dexDug</h2><p>错误一次编译，它会在修改后继续编译其他。所以有些错误可以删除 app/build 文件，再重新编译就好了</p>
<h2 id="Bind函数"><a href="#Bind函数" class="headerlink" title="Bind函数"></a>Bind函数</h2><p>情况是这样：</p>
<p>1、chat要添加文件就要新开一个navigator，chat有个回调函数提供给新开的navigator调用（功能是给chat添加数据）。</p>
<p>2、回调函数里面必须修改chat的数据所以用了this。</p>
<p>3、结果调用回调函数报错：this setstate is not a function。</p>
<p>分析原因是找不到this吧，因为回调函数传了几次，this该搞乱了吧。</p>
<p>问题解决：extrafun:this.addFileMessage.bind(this)</p>
<p>传值得时候就绑定this，这样就不会乱了！！！！！！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;flex属性&quot;&gt;&lt;a href=&quot;#flex属性&quot; class=&quot;headerlink&quot; title=&quot;flex属性&quot;&gt;&lt;/a&gt;flex属性&lt;/h2&gt;&lt;p&gt;就是说，所有带flex属性的子容器，flex值相加得到一个总数，该容器占父容器的比重就是这个容器flex值除
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="life" scheme="https://xuecat.github.io/tags/life/"/>
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React active(161)</title>
    <link href="https://xuecat.github.io/2016/02/23/161/"/>
    <id>https://xuecat.github.io/2016/02/23/161/</id>
    <published>2016-02-22T19:33:58.000Z</published>
    <updated>2016-08-28T06:06:54.431Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.lcode.org/react-native%E7%96%91%E9%9A%BE%E7%82%B9%E9%97%AE%E9%A2%98%E6%B7%B1%E5%9D%91%E6%9C%80%E5%BC%BA%E6%80%BB%E7%BB%93%E5%B8%96%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/" target="_blank" rel="external">大部分的错误，辅助页面</a></p>
<h2 id="我遇到的错误"><a href="#我遇到的错误" class="headerlink" title="我遇到的错误"></a>我遇到的错误</h2><p>   npm版本不对，升级。</p>
<p>gredle本地安装，zip包要是all，且放在当前目录。</p>
<pre><code>distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
#distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
distributionUrl=gradle-2.4-all.zip
</code></pre><p>别用git bash页面，最好用cmd，别用户权限</p>
<p>先开虚拟机，再start服务器。</p>
<p>一直红色，就删除配置文件，再重启。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E7%96%91%E9%9A%BE%E7%82%B9%E9%97%AE%E9%A2%98%E6%B7%B1%E5%9D%91%E6%9C%80%E5%BC%BA%E6%80%BB%E7%B
    
    </summary>
    
      <category term="第三方库" scheme="https://xuecat.github.io/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
      <category term="React-active" scheme="https://xuecat.github.io/tags/React-active/"/>
    
  </entry>
  
  <entry>
    <title>windows使用js库(160)</title>
    <link href="https://xuecat.github.io/2016/02/18/160/"/>
    <id>https://xuecat.github.io/2016/02/18/160/</id>
    <published>2016-02-17T19:33:58.000Z</published>
    <updated>2016-08-27T22:20:58.615Z</updated>
    
    <content type="html"><![CDATA[<p>主流有：hex cef nw（node-webkit）Electron</p>
<p>Atom、Visual Studio Code用的是Electron<br></p>
<p>倘若你的桌面版应用没有跟底层挂钩，也就是没有使用到消息推送、版本升级、打印功能之类的东西，那么没关系。但是一旦使用到这些功能，你就彻底调到坑里了，nw有个致命的缺陷在于所有的非javascript编写的模块都需要重新用nw-gyp重新编译一下，这个编译的过程会出现各种各样的问题。而Electron几乎可以使用所有的node模块，只需要node-gyp编译的即可。主要深坑就在这！！！<br></p>
<p>有道自己有个项目叫 heX 。这是其官网的介绍：<br>heX 项目于 2012 年启动，基于开源项目 CEF，它内部整合了开源项目 Chromium 及 Node.JS，将两者的 V8 引擎和消息循环合并，从而达到了在 Chromium 所展现的 Web 页面内可以直接使用 Node.JS 原生和及第三方扩展的 API 以及 Node.JS 最大的特色——异步回调与事件循环。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主流有：hex cef nw（node-webkit）Electron&lt;/p&gt;
&lt;p&gt;Atom、Visual Studio Code用的是Electron&lt;br&gt;&lt;/p&gt;
&lt;p&gt;倘若你的桌面版应用没有跟底层挂钩，也就是没有使用到消息推送、版本升级、打印功能之类的东西，那么没
    
    </summary>
    
      <category term="第三方库" scheme="https://xuecat.github.io/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
      <category term="mfc" scheme="https://xuecat.github.io/tags/mfc/"/>
    
  </entry>
  
  <entry>
    <title>生活认识(159)</title>
    <link href="https://xuecat.github.io/2016/01/28/159/"/>
    <id>https://xuecat.github.io/2016/01/28/159/</id>
    <published>2016-01-27T19:33:58.000Z</published>
    <updated>2016-08-27T22:21:40.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Artistic Style:<br><br><br>D:\AStyle_2.05.1_windows\AStyle\bin\AStyle.exe<br><br>–options=D:\AStyle_2.05.1_windows\AStyle\bin\astylerc <em>.h </em>.cpp <em>.hpp </em>.c<br><br>$(ItemDir)<br></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Artistic Style:&lt;br&gt;&lt;br&gt;&lt;br&gt;D:\AStyle_2.05.1_windows\AStyle\bin\AStyle.exe&lt;br&gt;&lt;br&gt;–options=D:\AStyle_2.05.1_windows\AStyle\bi
    
    </summary>
    
      <category term="配置" scheme="https://xuecat.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="编译器和VC" scheme="https://xuecat.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8CVC/"/>
    
  </entry>
  
  <entry>
    <title>高低字节宏(157)</title>
    <link href="https://xuecat.github.io/2016/01/25/157/"/>
    <id>https://xuecat.github.io/2016/01/25/157/</id>
    <published>2016-01-24T19:33:58.000Z</published>
    <updated>2016-08-27T22:10:49.618Z</updated>
    
    <content type="html"><![CDATA[<pre><code>#define MAKEWORD(a, b)      ((WORD)(((BYTE)((DWORD_PTR)(a) &amp; 0xff)) | ((WORD)((BYTE)((DWORD_PTR)(b) &amp; 0xff))) &lt;&lt; 8))
#define MAKELONG(a, b)      ((LONG)(((WORD)((DWORD_PTR)(a) &amp; 0xffff)) | ((DWORD)((WORD)((DWORD_PTR)(b) &amp; 0xffff))) &lt;&lt; 16))
#define LOWORD(l)           ((WORD)((DWORD_PTR)(l) &amp; 0xffff))
#define HIWORD(l)           ((WORD)((DWORD_PTR)(l) &gt;&gt; 16))
#define LOBYTE(w)           ((BYTE)((DWORD_PTR)(w) &amp; 0xff))
#define HIBYTE(w)           ((BYTE)((DWORD_PTR)(w) &gt;&gt; 8))
</code></pre><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>
<p>从上面加粗部分可以看出 LOWORD 和 HIWORD 返回值是WORD型，即unsigned short，因此不能表示负数，在使用的时候可能就要注意了。<br><br>对于一般情况，用它们是没有问题的，但有一个特例，就是利用它们取当前鼠标的坐标时，因为鼠标有时候会移出窗口，因此我们得到的值本应该是负数，但是利用这两个宏得出的值始终是正值。我们可以用以下的宏来代替。</p>
<pre><code>#define GET_X_LPARAM(lp)                        ((int)(short)LOWORD(lp))
#define GET_Y_LPARAM(lp)                        ((int)(short)HIWORD(lp))


typedef unsigned long       DWORD;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;#define MAKEWORD(a, b)      ((WORD)(((BYTE)((DWORD_PTR)(a) &amp;amp; 0xff)) | ((WORD)((BYTE)((DWORD_PTR)(b) &amp;amp; 0xff))) &amp;lt;&amp;lt; 8)
    
    </summary>
    
      <category term="学习" scheme="https://xuecat.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="mfc" scheme="https://xuecat.github.io/tags/mfc/"/>
    
  </entry>
  
</feed>
