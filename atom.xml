<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XueCat</title>
  <subtitle>用代码创造世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://XueCat.github.io/"/>
  <updated>2016-08-25T14:46:44.619Z</updated>
  <id>http://XueCat.github.io/</id>
  
  <author>
    <name>XueCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://XueCat.github.io/2016/08/25/hello-world/"/>
    <id>http://XueCat.github.io/2016/08/25/hello-world/</id>
    <published>2016-08-25T14:46:44.619Z</published>
    <updated>2016-08-25T14:46:44.619Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小诗</title>
    <link href="http://XueCat.github.io/2014/08/26/20/"/>
    <id>http://XueCat.github.io/2014/08/26/20/</id>
    <published>2014-08-25T19:23:20.000Z</published>
    <updated>2016-08-26T20:06:37.371Z</updated>
    
    <content type="html"><![CDATA[<pre><code>天下风云出我辈，一入江湖岁月催。

    皇图霸业谈笑中，不胜人生一场醉。

    只叹尘世如潮，

    人生如水！

    何时归！

    提剑跨骑挥鬼蜮，白骨如山鸟惊飞。

    尘世如潮如水，

    只叹江湖几人回！

    夜雨八方战孤城，平明剑气看刀声。

    侠骨千年寻不见，碧血红叶醉秋风。


            ——已开始以为伟大的是感情，到最后发现强悍的是命运！
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;天下风云出我辈，一入江湖岁月催。

    皇图霸业谈笑中，不胜人生一场醉。

    只叹尘世如潮，

    人生如水！

    何时归！

    提剑跨骑挥鬼蜮，白骨如山鸟惊飞。

    尘世如潮如水，

    只叹江湖几人回！

    夜雨
    
    </summary>
    
      <category term="生活" scheme="http://XueCat.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://XueCat.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>libcurl 百度图片api(19)</title>
    <link href="http://XueCat.github.io/2014/08/25/19/"/>
    <id>http://XueCat.github.io/2014/08/25/19/</id>
    <published>2014-08-24T19:21:57.000Z</published>
    <updated>2016-08-26T19:23:09.913Z</updated>
    
    <content type="html"><![CDATA[<p>今天差点就放弃了，简直作弄人。<br>我使用http协议走去调用我发现的那个百度api。<br>图片获取不到，总是返回302（资源重定向），重定向的资源确实错误的页面，我也不知道为何！</p>
<p>气人，最后我被逼无路，从http底层找错误。用google浏览器发现我的http头貌似。。<br>于是我复制google浏览器的http头，重写http请求（添加http头重定义）</p>
<p>发现可行，下载正常！问题解决！</p>
<p>十分开心！</p>
<p>附上过程猜测：<br>      我在一次过程猜测中，以为是我的数据问题，以为它传给我的数据存在换行符解析错误。<br>linux换行符是：’\n’<br>mac：相同<br>windows:’\n\t’</p>
<p>百度不可能犯这错误吧！ 后来发现数据大小不够。唉！居然这么解决了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天差点就放弃了，简直作弄人。&lt;br&gt;我使用http协议走去调用我发现的那个百度api。&lt;br&gt;图片获取不到，总是返回302（资源重定向），重定向的资源确实错误的页面，我也不知道为何！&lt;/p&gt;
&lt;p&gt;气人，最后我被逼无路，从http底层找错误。用google浏览器发现我的h
    
    </summary>
    
      <category term="第三方库" scheme="http://XueCat.github.io/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
      <category term="libcurl" scheme="http://XueCat.github.io/tags/libcurl/"/>
    
  </entry>
  
  <entry>
    <title>多线程手动销毁(18)</title>
    <link href="http://XueCat.github.io/2014/08/23/18/"/>
    <id>http://XueCat.github.io/2014/08/23/18/</id>
    <published>2014-08-22T19:18:22.000Z</published>
    <updated>2016-08-26T19:21:43.730Z</updated>
    
    <content type="html"><![CDATA[<p>为了获取线程返回值，必须要手动销毁线程，销毁线程错误的做法：</p>
<p><img src="/picture/img/de.jpg" alt=""></p>
<p>应该如此销毁：</p>
<p><img src="/picture/img/ok.jpg" alt=""></p>
<p>另外，讲一下c++的new：</p>
<p>类的静态成员变量， 它不是你new 出来的，你不new 它就已经分配了内存。</p>
<p>所以，delete无法销毁静态空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了获取线程返回值，必须要手动销毁线程，销毁线程错误的做法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/picture/img/de.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;应该如此销毁：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/picture/img/ok.jpg&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="学习" scheme="http://XueCat.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多线程" scheme="http://XueCat.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>more effective c++限制对象个数(17)</title>
    <link href="http://XueCat.github.io/2014/08/22/17/"/>
    <id>http://XueCat.github.io/2014/08/22/17/</id>
    <published>2014-08-21T19:30:44.000Z</published>
    <updated>2016-08-27T03:15:48.261Z</updated>
    
    <content type="html"><![CDATA[<p>方法一：仅允许一个对象<br>它先把类构造析构函数私化，<br>然后为类写个friend Printer&amp; thePrinter()–——友元函数不是类成员，直接static Printer p; return p;来打到限制的作用。</p>
<p>感悟：<strong>封装有计数功能的类，最好把类析构构造函数私有化，（这两个函数进行计数值得自加和自减，抛出异常）。  设计一个static的接口来new创建对象，当然希望用auto_ptr来创建。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方法一：仅允许一个对象&lt;br&gt;它先把类构造析构函数私化，&lt;br&gt;然后为类写个friend Printer&amp;amp; thePrinter()–——友元函数不是类成员，直接static Printer p; return p;来打到限制的作用。&lt;/p&gt;
&lt;p&gt;感悟：&lt;stro
    
    </summary>
    
      <category term="书籍" scheme="http://XueCat.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="c++" scheme="http://XueCat.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>CreateMenu与CreatePopupMenu</title>
    <link href="http://XueCat.github.io/2014/08/06/14/"/>
    <id>http://XueCat.github.io/2014/08/06/14/</id>
    <published>2014-08-05T19:29:26.000Z</published>
    <updated>2016-08-27T03:37:11.519Z</updated>
    
    <content type="html"><![CDATA[<p>很多人都弄不清楚这CreateMenu与CreatePopupMenu的区别，继而发生很多莫名其妙的菜单行为。虽然极少数情况下，Windows能检测出来是你混淆了这两个函数，并且会在合适的时候把错误的函数调换过来，但我们不能总是指望Windows能够正确的判断出我们想要的操作，所以还是得弄清楚这两个函数到底有什么不同。</p>
<p>CreateMenu是创建水平菜单，通常是放置在顶级窗口中，同时也是作为顶级菜单的，就像我们经常看到的“文件”，“编辑”等菜单。而CreatePopupMenu则是创建一个竖立的弹出菜单，通常被用来做另一个菜单的子菜单，或者右键菜单的顶级菜单。<br>菜单资源总是以菜单栏的形式出现，然而，当你想从资源中加载一个弹出菜单时，就应该将弹出菜单放到一个空的水平菜单栏中。下面通过这个函数来说明如何在水平菜单中内嵌一个弹出菜单。</p>
<figure class="highlight c"><figcaption><span>代码测试++</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">UsePopUpMenu</span><span class="params">(HWND hwnd, HINSTANCE hinst, LPCTSTR pszMenu)</span></span></div><div class="line">&#123;</div><div class="line">    HMENU hmenu = LoadMenu(hinst, pszMenu);</div><div class="line">    <span class="keyword">if</span>(hmenu)</div><div class="line">    &#123;</div><div class="line">        HMENU hpopMenu = GetSubMenu(hmenu, <span class="number">0</span>);</div><div class="line">        TrackPopupMenu(hpopMenu, TPM_LEFTALIGN | TPM_TOPALIGN | TPM_RIGHTBUTTON, GET_X_LPARAM(lparam), GET_Y_LPARAM(lparam), <span class="number">0</span>, hwnd, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人都弄不清楚这CreateMenu与CreatePopupMenu的区别，继而发生很多莫名其妙的菜单行为。虽然极少数情况下，Windows能检测出来是你混淆了这两个函数，并且会在合适的时候把错误的函数调换过来，但我们不能总是指望Windows能够正确的判断出我们想要的操
    
    </summary>
    
      <category term="Windows" scheme="http://XueCat.github.io/categories/Windows/"/>
    
    
      <category term="mfc" scheme="http://XueCat.github.io/tags/mfc/"/>
    
  </entry>
  
  <entry>
    <title>DC内存(13)</title>
    <link href="http://XueCat.github.io/2014/08/04/13/"/>
    <id>http://XueCat.github.io/2014/08/04/13/</id>
    <published>2014-08-03T19:28:22.000Z</published>
    <updated>2016-08-27T03:17:42.127Z</updated>
    
    <content type="html"><![CDATA[<p> getdc和releasedc必须配对使用。造成内存泄露。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; getdc和releasedc必须配对使用。造成内存泄露。&lt;/p&gt;

    
    </summary>
    
      <category term="Windows" scheme="http://XueCat.github.io/categories/Windows/"/>
    
    
      <category term="mfc" scheme="http://XueCat.github.io/tags/mfc/"/>
    
  </entry>
  
  <entry>
    <title>切桌面函数</title>
    <link href="http://XueCat.github.io/2014/08/02/11/"/>
    <id>http://XueCat.github.io/2014/08/02/11/</id>
    <published>2014-08-01T19:25:03.000Z</published>
    <updated>2016-08-26T19:26:08.783Z</updated>
    
    <content type="html"><![CDATA[<p>IShellDispatch4::ToggleDesktop<br>切换桌面函数。<br>全部最小化当前进程。切回桌面</p>
<pre><code>#undef **
</code></pre><p>取消对应宏定义。</p>
<p>SystemParametersInfo获取修改系统信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IShellDispatch4::ToggleDesktop&lt;br&gt;切换桌面函数。&lt;br&gt;全部最小化当前进程。切回桌面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#undef **
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取消对应宏定义。&lt;/p&gt;
&lt;p&gt;SystemParametersInfo
    
    </summary>
    
      <category term="Windows" scheme="http://XueCat.github.io/categories/Windows/"/>
    
    
      <category term="c函数" scheme="http://XueCat.github.io/tags/c%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>CT2A-CA2T</title>
    <link href="http://XueCat.github.io/2014/06/27/CT2A-CA2T/"/>
    <id>http://XueCat.github.io/2014/06/27/CT2A-CA2T/</id>
    <published>2014-06-26T19:07:04.000Z</published>
    <updated>2016-08-26T19:10:24.082Z</updated>
    
    <content type="html"><![CDATA[<p>注意：USES_CONVERSION宏开头</p>
<p>之前自己写了4个CHAR与TCHAR的编码函数，后来发现ms早就提供了类似的方法：CA2T CT2A……</p>
<p>但是有同事说，这两个函数不安全，有隐患，没有在意</p>
<p>但是真的用的时候，的确发现它们有些注意事项，简单来说，其实就是作用域的问题</p>
<p>Fun(CA2T(szSrc));</p>
<p>可以，Fun函数用转换后的TCHAR，没问题，因为没有出Fun()这个括号的作用域</p>
<p>tstring strDes = CA2T(szSrc)；</p>
<p>可以，因为返回值立刻赋给了strDes，strDes有自己的存储空间，CA2T的数据作用域就在这一行，出了就不要了</p>
<p>TCHAR* szDes = CA2T(szSrc);</p>
<p>失败，这个szDes指向一个已经释放的作用域的值，下一行在用szDes就危险了，没有分配</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注意：USES_CONVERSION宏开头&lt;/p&gt;
&lt;p&gt;之前自己写了4个CHAR与TCHAR的编码函数，后来发现ms早就提供了类似的方法：CA2T CT2A……&lt;/p&gt;
&lt;p&gt;但是有同事说，这两个函数不安全，有隐患，没有在意&lt;/p&gt;
&lt;p&gt;但是真的用的时候，的确发现它们有
    
    </summary>
    
      <category term="学习" scheme="http://XueCat.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>字符转数字</title>
    <link href="http://XueCat.github.io/2014/06/26/zifuzhuanshuzi/"/>
    <id>http://XueCat.github.io/2014/06/26/zifuzhuanshuzi/</id>
    <published>2014-06-26T14:51:16.000Z</published>
    <updated>2016-08-26T14:55:31.502Z</updated>
    
    <content type="html"><![CDATA[<p>msdn中使用字符串转数字、数字转字符串：_strtoui64, _wcstoui64,<br> _strtoui64_l, _wcstoui64_l, _itoa, _i64toa, _ui64toa,<br>_itow, _i64tow, _ui64tow</p>
<p>msdn当中有这么一句：Base of value; which must be in the range2–36和<br>   Number base to use.</p>
<p>调试发现指的是进制。十进制、二进制等（最多2-36）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;msdn中使用字符串转数字、数字转字符串：_strtoui64, _wcstoui64,&lt;br&gt; _strtoui64_l, _wcstoui64_l, _itoa, _i64toa, _ui64toa,&lt;br&gt;_itow, _i64tow, _ui64tow&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="学习" scheme="http://XueCat.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="c函数" scheme="http://XueCat.github.io/tags/c%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>if-change</title>
    <link href="http://XueCat.github.io/2014/06/26/if-change/"/>
    <id>http://XueCat.github.io/2014/06/26/if-change/</id>
    <published>2014-06-25T19:04:40.000Z</published>
    <updated>2016-08-26T19:06:00.852Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用if语句时，发现可以如此简写：(以前的无法编码，气死)<br> int demo = 1;<br> bool/int foo() (函数必须要是bool或者整形，只要不是void就好);<br> if (demo) {foo();} else{foo();}     改写成-&gt;   demo &amp;&amp; foo();  demo || foo();</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在使用if语句时，发现可以如此简写：(以前的无法编码，气死)&lt;br&gt; int demo = 1;&lt;br&gt; bool/int foo() (函数必须要是bool或者整形，只要不是void就好);&lt;br&gt; if (demo) {foo();} else{foo();}   
    
    </summary>
    
      <category term="学习" scheme="http://XueCat.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="代码编写" scheme="http://XueCat.github.io/tags/%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>框架(15)</title>
    <link href="http://XueCat.github.io/2014/06/25/15/"/>
    <id>http://XueCat.github.io/2014/06/25/15/</id>
    <published>2014-06-24T19:31:58.000Z</published>
    <updated>2016-08-26T19:32:34.753Z</updated>
    
    <content type="html"><![CDATA[<p>今天代码改写button了，感觉，对于框架的架构还是欠缺点。</p>
<p> 才一开始的封装，当一个模块出现四个功能时，我就该单独封装类，不然<br>后期肯定会添加封装的，到时代码冗余就不好看了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天代码改写button了，感觉，对于框架的架构还是欠缺点。&lt;/p&gt;
&lt;p&gt; 才一开始的封装，当一个模块出现四个功能时，我就该单独封装类，不然&lt;br&gt;后期肯定会添加封装的，到时代码冗余就不好看了。&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://XueCat.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>mfc rtti技术(12)</title>
    <link href="http://XueCat.github.io/2014/06/25/12/"/>
    <id>http://XueCat.github.io/2014/06/25/12/</id>
    <published>2014-06-24T19:26:33.000Z</published>
    <updated>2016-08-27T03:16:01.221Z</updated>
    
    <content type="html"><![CDATA[<p>模态对话框，非模态对话框（domodal， new、create、destroywindow）</p>
<p>CRuntimeClass DECLEAR_DYNAMIC/IMPLEMENT_DYNAMIC<br>由于所有的类继承CObject类都包含此结构，用于保存基类对象类等信息。定义宏则是为其添加此类必要成员函数和成员变量。<br>（也就是说每新建一个类我们都可以加入MFC的继承表中，就是每个类声明中加入一个CRuntimeClass但是这个数据结构中有很多成员变量和函数。而且在实现文件中也要加入一些成员变量和函数的初始化或者成员函数的定义工作，每个类都要这么做会花很多行代码。还好微软给我们定义了几个宏让我们可以很方便的把我们定义的类加入到MFC继承的大绳中去。）</p>
<p>（其实说白了就是一个链表，每个类里加DECLARE_DYNAMIC后就生成一个CRuntimeClass的静态变量，保存了自己的类名和基类的静态CRuntimeClass指针。其它那些函数都是用这两个遍历查找。对应基类的名字，或对应名字的基类指针,在程序全局中也有一个CRuntimeClass链表，里面有所有加了运行类支持的类信息。）</p>
<p>mfc的RTTI技术（运行时类型识别）：<br>       <code>IsKindOf(RUNTIME_CLASS(CtestDlg));</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模态对话框，非模态对话框（domodal， new、create、destroywindow）&lt;/p&gt;
&lt;p&gt;CRuntimeClass DECLEAR_DYNAMIC/IMPLEMENT_DYNAMIC&lt;br&gt;由于所有的类继承CObject类都包含此结构，用于保存基类对象
    
    </summary>
    
      <category term="Windows" scheme="http://XueCat.github.io/categories/Windows/"/>
    
    
      <category term="mfc" scheme="http://XueCat.github.io/tags/mfc/"/>
    
      <category term="rtti" scheme="http://XueCat.github.io/tags/rtti/"/>
    
  </entry>
  
  <entry>
    <title>more effective c++处理时事新闻，内容有文字，图形构成(16)</title>
    <link href="http://XueCat.github.io/2014/06/25/16/"/>
    <id>http://XueCat.github.io/2014/06/25/16/</id>
    <published>2014-06-24T19:13:16.000Z</published>
    <updated>2016-08-26T19:18:07.236Z</updated>
    
    <content type="html"><![CDATA[<pre><code>class NLComponent{}
class TextBlock: public NLComponent{}
class Graphic: public NLComponent{}

class NewsLetter{
list&lt;NLComponent*&gt; components
}    
</code></pre><p>方法一：他用了一个static NLComponent* readComponent(istream&amp; str)，来读取数据，分别创建对象。因为每次传入数据时，调用函数然后就push_back了返回值保存指针入栈。</p>
<p>方法二：对上面list这个成员的拷贝，因为存放的是类对象。所以他自己写了个虚函数:<br>virtual NLComponent<em> clone() const =0;<br>virtual TextBlock</em> clone() const {return new TextBlock(*this);}   等等等<br>变向的调用了复制构造函数，来进行复制。<br>所以NewsLetter的复制构造函数就直接pushback它的clone函数。</p>
<p>感悟：<br><strong>派生类能用到的函数，最好基类虚化，分别封装虚函数。然后封装用一个函数去调用这各个不同的虚函数。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;class NLComponent{}
class TextBlock: public NLComponent{}
class Graphic: public NLComponent{}

class NewsLetter{
list&amp;lt;NLCompon
    
    </summary>
    
      <category term="书籍" scheme="http://XueCat.github.io/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="c++" scheme="http://XueCat.github.io/tags/c/"/>
    
      <category term="effective" scheme="http://XueCat.github.io/tags/effective/"/>
    
  </entry>
  
  <entry>
    <title>生活认识</title>
    <link href="http://XueCat.github.io/2014/06/12/firsttest/"/>
    <id>http://XueCat.github.io/2014/06/12/firsttest/</id>
    <published>2014-06-12T06:56:58.000Z</published>
    <updated>2016-08-26T18:13:41.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以前用pelican，后面markdown语法多了，现在换hexo先把日记放个测试来看看效果。"><a href="#以前用pelican，后面markdown语法多了，现在换hexo先把日记放个测试来看看效果。" class="headerlink" title="以前用pelican，后面markdown语法多了，现在换hexo先把日记放个测试来看看效果。"></a>以前用pelican，后面markdown语法多了，现在换hexo先把日记放个测试来看看效果。</h1><p><img src="/picture/q.jpg" alt=""></p>
<p> 最近是我的复习时间，我在寝室边复习边玩的状态，让我很是无奈！隔壁的小潘、老牟、他们并没有开始复习。现在， 我发现其实上课时，认真听下老师讲的，期末复习真的只要做几道题就好了；真蛋疼。室友，蔡衫连续的学习精神已经让我十分佩服了。我为何无法成为那样的好学生；会想平时上课，基本喜欢玩手机。就算带了书去，也没有怎么看。大二饿了，我感觉自己慢慢有点堕落了！现在我有接近三周没去实验室了。汪自衡的代码我还并没有写完！<br>     我自己也很是困惑。每天每咋干就好疲惫！我想，我该去实验室了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;以前用pelican，后面markdown语法多了，现在换hexo先把日记放个测试来看看效果。&quot;&gt;&lt;a href=&quot;#以前用pelican，后面markdown语法多了，现在换hexo先把日记放个测试来看看效果。&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="生活" scheme="http://XueCat.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://XueCat.github.io/tags/life/"/>
    
  </entry>
  
</feed>
